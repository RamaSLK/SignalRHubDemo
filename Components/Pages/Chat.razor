@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Real-Time Chat App</PageTitle>

<form>
    <div class="row p-1">
        <div class="col-sm-1">
            <label class="form-label m-1">Username</label>
        </div>
        <div class="col-sm-3">
            <input @bind="userInput" type="text" class="form-control form-control-sm">
        </div>
    </div>
    <div class="row p-1">
        <div class="col-sm-1">
            <label class="form-label m-1" size="50">Message</label>
        </div>
        <div class="col-sm-3">
            <input @bind="messageInput" type="text" class="form-control form-control-sm">
        </div>
    </div>
    
    <div class="row p-1">
        <div class="col">
            <button @onclick="Send" disabled="@(!IsConnected)" type="button" class="btn btn-primary btn-sm">Send</button>
        </div>
    </div>
</form>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}